name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      build_type: Release

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
        architecture: [x86_64, arm64]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: mac
          - os: windows-2022
            platform: win
        exclude:
          - os: ubuntu-latest
            architecture: arm64
          - os: windows-2022
            architecture: arm64

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout submodules
        shell: bash
        run: |
          git submodule update --init --recursive

      - name: Get commit short SHA
        uses: benjlevesque/short-sha@v3.0
        id: short-sha

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.30.x'

      - name: Use cmake
        run: cmake --version

      - name: Setup MacOS environment
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install utf8proc

      - name: Configure CMake (Windows and Linux)
        if: matrix.os != 'macos-latest'
        shell: bash
        run: |
          cmake .

      - name: Configure CMake (MacOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          cmake . -DCMAKE_APPLE_SILICON_PROCESSOR=${{ matrix.architecture }}

      - name: Build
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cmake --build . --config ${{ env.build_type }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: NeoCCAMS-${{ matrix.platform }}-${{ matrix.architecture }}
          path: |
            lib/NeoCCAMS*
            bin/${{ env.build_type }}/NeoCCAMS*

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_builds

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install NeoRadar CLI
        run: yarn global add https://github.com/neoradar-project/cli.git

      - name: Organize plugin binaries for packaging
        run: |
          mkdir -p all_builds/NeoCCAMS
          find all_builds -type f -name 'NeoCCAMS*' -exec cp {} all_builds/NeoCCAMS/ \;

      - name: Rename binaries by platform and architecture
        shell: bash
        run: |
          for f in all_builds/NeoCCAMS/*; do
            ext="${f##*.}"
            base=$(basename "$f")
            # Detect platform and arch from the filename or from the file extension
            if [[ "$base" == *"dylib" ]]; then
              # macOS
              if [[ "$base" == *"arm64"* ]]; then
                mv "$f" "all_builds/NeoCCAMS/mac-arm64.dylib"
              else
                mv "$f" "all_builds/NeoCCAMS/mac-x64.dylib"
              fi
            elif [[ "$base" == *"so" ]]; then
              # Linux
              mv "$f" "all_builds/NeoCCAMS/linux-x64.so"
            elif [[ "$base" == *"dll" ]]; then
              # Windows
              mv "$f" "all_builds/NeoCCAMS/windows-x64.dll"
            fi
          done

      - name: Package .nrplugin
        run: |
          echo y | neoradar-cli create-plugin-archives ./all_builds

      - name: Upload final .nrplugin
        uses: actions/upload-artifact@v4
        with:
          name: NeoCCAMS.nrplugin
          path: plugins/NeoCCAMS.nrplugin